export const GanttSampleOrder: Object = [
    { 'path': 'gantt/overview', 'component': 'Overview', 'name': 'Overview', 'order': '01', 'description': 'This example demonstrates the simple Gantt chart with summary task, child tasks, milestone tasks, dependencies with event markers of project.', 'category': 'Gantt', 'api': '{"GanttComponent":["dataSource","taskFields","height","highlightWeekends","eventMarkers","labelSettings","projectStartDate","projectEndDate"] }' },
    { 'path': 'gantt/default', 'component': 'Default', 'name': 'Default Functionalities', 'order': '01', 'description': 'This example demonstrates the simple Gantt chart with summary task, child tasks, milestone tasks, dependencies with event markers of project.', 'category': 'Gantt', 'api': '{"GanttComponent":["dataSource","taskFields","height","highlightWeekends","eventMarkers","labelSettings","projectStartDate","projectEndDate"] }' },
    { 'path': 'gantt/editing', 'component': 'Editing', 'name': 'Editing', 'order': '01', 'description': 'This example demonstrates the cell editing, dialog editing, taskbar editing and dependency editing support in Gantt.', 'category': 'Gantt', 'api': '{"GanttComponent":["dataSource","dateFormat","height","taskFields","editSettings","toolbar","columns","treeColumnIndex","allowSelection","gridLines","resourceFields","resources","highlightWeekends","timelineSettings","labelSettings","labelSettings","projectStartDate","projectEndDate","editDialogFields","eventMarkers","splitterSettings"]}' },
    { 'path': 'gantt/virtual-scroll', 'component': 'Virtualscroll', 'name': 'VirtualScroll', 'order': '01', 'description': 'This example illustrates binding large data and smooth scrolling with large data using the Virtual Scroll feature in the Syncfusion Gantt chart.', 'category': 'Gantt', 'api': '{"GanttComponent":["dataSource","taskFields","treeColumnIndex","height","highlightWeekends","selectionSettings","enableVirtualization"]}' },
    { 'path': 'gantt/loading-animation', 'component': 'LoadingAnimation', 'name': 'Loading Animation', 'order': '01', 'description': 'This demo for Essential JS 2 gantt component shows the loading indicator when gantt loading, refreshing and performing other action.', 'category': 'Gantt', 'api': '{"GanttComponent":["dataSource","taskFields","treeColumnIndex","height","highlightWeekends","selectionSettings","enableVirtualization","loadingIndicator","allowFiltering"]}' },
    { 'path': 'gantt/local-data', 'component': 'LocalData', 'name': 'Local Data', 'order': '02', 'description': 'This example demonstrates the way of binding local data to Gantt chart with an array of JavaScript objects.', 'category': 'Data Binding', 'api': '{"GanttComponent":["dataSource","height","taskFields","columns","treeColumnIndex","allowSelection","highlightWeekends","labelSettings","projectStartDate","projectEndDate","splitterSettings"] }' },
    { 'path': 'gantt/load-on-demand', 'component': 'LoadOnDemand', 'name': 'Load On Demand', 'order': '02', 'description': 'This example demonstrates the way of binding load on-demand data to Gantt chart with an array of JavaScript objects.', 'category': 'Data Binding', 'api': '{"GanttComponent":["dataSource","height","taskFields","columns","treeColumnIndex","allowSelection","highlightWeekends","labelSettings","projectStartDate","projectEndDate","splitterSettings","enableVirtualization","loadChildOnDemand"] }' },
    { 'path': 'gantt/remote-data', 'component': 'RemoteData', 'name': 'Remote Data', 'order': '02', 'description': 'This sample demonstrates the way of binding data to Gantt chart with remote service. The Gantt chart data source is bound to remote data using DataManager.', 'category': 'Data Binding', 'api': '{"GanttComponent":["dataSource","height","taskFields","columns","treeColumnIndex","allowSelection","gridLines","highlightWeekends","timelineSettings","labelSettings","includeWeekend","projectStartDate","projectEndDate"]}' },
    { 'path': 'gantt/self-reference-data', 'component': 'SelfReferenceData', 'name': 'Self Reference Data', 'order': '02', 'description': 'This example demonstrates the way of binding self-referential flat data with parentID to the Gantt chart.', 'category': 'Data Binding', 'api': '{"GanttComponent":["dataSource","height","taskFields","columns","treeColumnIndex","allowSelection","highlightWeekends","labelSettings","projectStartDate","projectEndDate","splitterSettings"]}' },
    { 'path': 'gantt/taskMode', 'component': 'TaskMode', 'name': 'Task Scheduling Mode', 'order': '04', 'description': 'This example demonstrates how to change the task modes as auto, manual or custom depends upon particular tasks.', 'category': 'Scheduling Concepts', 'api': '{"GanttComponent":["dataSource","taskFields","allowSelection","height","projectStartDate","projectEndDate","allowSorting","enableContextMenu","toolbar","columns","validateManualTasksOnLinking","editSettings","labelSettings","splitterSettings","taskMode"]}' },
    { 'path': 'gantt/work-week', 'component': 'WorkWeek', 'name': 'Workweek', 'order': '04', 'description': 'This sample demonstrates the way to bind the customizable array of working days in a week for project.', 'category': 'Scheduling Concepts', 'api': '{"GanttComponent":["dataSource","taskFields","allowSelection","height","workWeek","projectStartDate","projectEndDate"]}' },
    { 'path': 'gantt/timeline-template', 'component': 'TimelineTemplate', 'name': 'Timeline Template','type': 'new', 'order': '07', 'description': 'This sample explains the way of rendering timeline template by mapping template elements to the timelineTemplate property.', 'category': 'Templates', 'api': '{"GanttComponent":["dataSource","taskFields","columns","height","projectStartDate","projectEndDate","timelineSettings","splitterSettings","labelSettings","timelineTemplate"]}' }
];